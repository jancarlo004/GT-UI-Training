import { PcfButton, PcfSelectInput, PcfTextInput } from "@gtui/gt-ui-framework";
import { t } from "testcafe";
import { OrganizationSearchPopup } from "../../../../ignite/backups/classFiles/policysolutions/pages/popup/Organization/OrganizationSearchPopup";
import { NewAccount } from "../../../pages/account/NewAccount";
import { Summary } from "../../../pages/account/Summary";
import { AccountTabBar } from "../../../pages/navigation/tabBar/AccountTabBar";
import { AutoGeneratedCustomMethod } from "../../util/AutoGeneratedCustomMethod";
import world from "../../util/world";

const accountTabBar = new AccountTabBar();
const newAccount = new NewAccount();
const organizationSearchPopup = new OrganizationSearchPopup();
const summary = new Summary();
const autoGeneratedCustomMethod = new AutoGeneratedCustomMethod();

export class AccountCreationScenario{

    async createPersonalAccount(){

        await t.click(accountTabBar.tabBarAccountTab.component.find('.gw-action--expand-button'));
        await t.click(accountTabBar.tabBarAccountTab.component.find('.gw-label').withText('New Account'));

        if(world.PrimaryInsuredInformation.PersonalInfo.firstName == '' && world.PrimaryInsuredInformation.PersonalInfo.lastName == ''){
            
            world.PrimaryInsuredInformation.PersonalInfo.firstName = await autoGeneratedCustomMethod.generateRandomText(10);
            world.PrimaryInsuredInformation.PersonalInfo.lastName = await autoGeneratedCustomMethod.generateRandomText(10)
            
        }

        await newAccount.newAccountNewAccountScreenNewAccountSearchDVGlobalPersonNameInputSetFirstName.setValue(world.PrimaryInsuredInformation.PersonalInfo.firstName);
        await newAccount.newAccountNewAccountScreenNewAccountSearchDVGlobalPersonNameInputSetLastName.setValue(world.PrimaryInsuredInformation.PersonalInfo.lastName);
        
        world.PrimaryInsuredInformation.PersonalInfo.fullName = world.PrimaryInsuredInformation.PersonalInfo.firstName +" "+ world.PrimaryInsuredInformation.PersonalInfo.lastName;

        await newAccount.newAccountNewAccountScreenNewAccountSearchDVSearchAndResetInputSetSearchLinksInputSetSearch.click();

        if( await newAccount.newAccountScreenNewAccountSearchResultsLV.rowCount() != 0){

            await newAccount.newAccountScreenNewAccountSearchResultsLV.clickOnCell(0,1);

        }

        else{

            await newAccount.newAccountScreenNewAccountButton.click();
            await newAccount.newAccountButtonNewAccount_Person.click();

            let createAccountParent = accountTabBar.tabBarAccountTab.component.parent().sibling();
            let homePhone = createAccountParent.find('div[id$="-NationalSubscriberNumber_Input"]').withText('Home Phone');
            let primaryEmail = createAccountParent.find('div[id$="-EmailAddress1_Input"]').withText('Primary Email');
            let streetAddress = createAccountParent.find('div[id$="-AddressLine1_Input"]').withText('Address 1');
            let city = createAccountParent.find('div[id$="-City_Input"]').withText('City');
            let county = createAccountParent.find('div[id$="-County_Input"]').withText('County');
            let state = createAccountParent.find('div[id$="-State_Input"]').withText('State');
            let zipCode = createAccountParent.find('div[id$="-PostalCode_Input"]').withText('ZIP Code');
            let addressType = createAccountParent.find('div[id$="-AddressType_Input"]').withText('Address Type');
            let organizationSearchButton = createAccountParent.find('div[id$="-Producer_Input"]').withText('Organization');
            let producerCode = createAccountParent.find('div[id$="-ProducerCode_Input"]').withText('Producer Code');

            await PcfTextInput(homePhone.find('div[id$="-NationalSubscriberNumber"]')).setValue(await autoGeneratedCustomMethod.generateHomePhoneNumber());
            await PcfTextInput(primaryEmail.find('div[id$="-EmailAddress1"]')).setValue(world.PrimaryInsuredInformation.PersonalInfo.firstName + world.PrimaryInsuredInformation.PersonalInfo.lastName + "@Test.Test");
            await PcfTextInput(streetAddress.find('div[id$="-AddressLine1"]')).setValue(world.PrimaryInsuredInformation.AddressInfo.streetAddress);
            await PcfTextInput(city.find('div[id$="-City"]')).setValue(world.PrimaryInsuredInformation.AddressInfo.city);
            await PcfTextInput(county.find('div[id$="-County"]')).setValue(world.PrimaryInsuredInformation.AddressInfo.county);

            await PcfSelectInput(state.find('div[id$="-State"]')).click();
            await PcfSelectInput(state.find('div[id$="-State"]')).selectOptionByLabel(world.PrimaryInsuredInformation.AddressInfo.stateFull);

            await PcfTextInput(zipCode.find('div[id$="-PostalCode"]')).setValue(world.PrimaryInsuredInformation.AddressInfo.zipCode);
            
            await PcfSelectInput(addressType.find('div[id$="-AddressType"]')).click();
            await PcfSelectInput(addressType.find('div[id$="-AddressType"]')).selectOptionByLabel('Home');
            
            await PcfButton(organizationSearchButton.find('div[id$="-SelectOrganization"]')).click();
            await organizationSearchPopup.organizationSearchPopupOrganizationSearchPopupScreenOrganizationSearchDVGlobalContactNameInputSetName.setValue(world.OrganizationInfo.organizationName);
            await organizationSearchPopup.organizationSearchPopupOrganizationSearchPopupScreenOrganizationSearchDVSearchAndResetInputSetSearchLinksInputSetSearch.click();
            await organizationSearchPopup.organizationSearchPopupScreenOrganizationSearchResultsLV.clickOnCell(0,0);
            await PcfSelectInput(producerCode.find('div[id$="-ProducerCode"]')).selectOptionByLabel(world.OrganizationInfo.producerCode);
            await PcfButton(createAccountParent.find('div[id$="-Update"]')).click();

            world.InsuranceInfo.accountNumber = await summary.accountDetailsDetailViewTile_DVAccountNumber.component.find('.gw-value-readonly-wrapper').innerText;
            console.log("Account Number: ",world.InsuranceInfo.accountNumber);
            
        }

    }

}