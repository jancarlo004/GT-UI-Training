import { PcfButton, PcfSelectInput, PcfTextInput } from "@gtui/gt-ui-framework";
import { t } from "testcafe";
import { NewAccount } from "../../../pages/account/NewAccount";
import { Summary } from "../../../pages/account/Summary";
import { AccountTabBar } from "../../../pages/navigation/tabBar/AccountTabBar";
import { OrganizationSearchPopup } from "../../../pages/popup/Organization/OrganizationSearchPopup";
import { CreateAccountWizard } from "../../pages/CreateAccountWizard";
import { AutoGeneratedCustomMethod } from "../../util/AutoGeneratedCustomMethod";
import world from "../../util/world";

const accountTabBar = new AccountTabBar();
const newAccount = new NewAccount();
const organizationSearchPopup = new OrganizationSearchPopup();
const summary = new Summary();
const autoGeneratedCustomMethod = new AutoGeneratedCustomMethod();
const createAccountWizard = new CreateAccountWizard();

export class AccountCreationScenario{

    createAccountParent = accountTabBar.tabBarAccountTab.component.parent().sibling();

    async createPersonalAccount(){

        await t.click(accountTabBar.tabBarAccountTab.component.find('.gw-action--expand-button'));
        await t.click(accountTabBar.tabBarAccountTab.component.find('.gw-label').withText('New Account'));

        if(world.PrimaryInsuredInformation.PersonalInfo.firstName == '' && world.PrimaryInsuredInformation.PersonalInfo.lastName == ''){
            
            world.PrimaryInsuredInformation.PersonalInfo.firstName = await autoGeneratedCustomMethod.generateRandomText(10);
            world.PrimaryInsuredInformation.PersonalInfo.lastName = await autoGeneratedCustomMethod.generateRandomText(10)
            
        }

        await newAccount.newAccountNewAccountScreenNewAccountSearchDVGlobalPersonNameInputSetFirstName.setValue(world.PrimaryInsuredInformation.PersonalInfo.firstName);
        await newAccount.newAccountNewAccountScreenNewAccountSearchDVGlobalPersonNameInputSetLastName.setValue(world.PrimaryInsuredInformation.PersonalInfo.lastName);
        
        world.PrimaryInsuredInformation.PersonalInfo.fullName = world.PrimaryInsuredInformation.PersonalInfo.firstName +" "+ world.PrimaryInsuredInformation.PersonalInfo.lastName;

        await newAccount.newAccountNewAccountScreenNewAccountSearchDVSearchAndResetInputSetSearchLinksInputSetSearch.click();

        if( await newAccount.newAccountScreenNewAccountSearchResultsLV.rowCount() != 0){

            await newAccount.newAccountScreenNewAccountSearchResultsLV.clickOnCell(0,1);

        }

        else{

            let homePhone = this.createAccountParent.find('div[id$="-NationalSubscriberNumber_Input"]').withText('Home Phone');
            let primaryEmail = this.createAccountParent.find('div[id$="-EmailAddress1_Input"]').withText('Primary Email');

            await newAccount.newAccountScreenNewAccountButton.click();
            await newAccount.newAccountButtonNewAccount_Person.click();
            await PcfTextInput(homePhone.find('div[id$="-NationalSubscriberNumber"]')).setValue(await autoGeneratedCustomMethod.generateHomePhoneNumber());
            await PcfTextInput(primaryEmail.find('div[id$="-EmailAddress1"]')).setValue(world.PrimaryInsuredInformation.PersonalInfo.firstName + world.PrimaryInsuredInformation.PersonalInfo.lastName + "@Test.Test");
            
            await this.fillUpAddressInfo
            (

                world.PrimaryInsuredInformation.AddressInfo.streetAddress,
                world.PrimaryInsuredInformation.AddressInfo.city,
                world.PrimaryInsuredInformation.AddressInfo.county,
                world.PrimaryInsuredInformation.AddressInfo.stateFull,
                world.PrimaryInsuredInformation.AddressInfo.zipCode,
                world.PrimaryInsuredInformation.AddressInfo.AddressType, 

            )
            
            await this.fillUpOrganizationInfo
            (

                world.OrganizationInfo.organizationName,
                world.OrganizationInfo.producerCode

            );

            await PcfButton(this.createAccountParent.find('div[id$="-Update"]')).click();

            world.InsuranceInfo.accountNumber = await summary.accountDetailsDetailViewTile_DVAccountNumber.component.find('.gw-value-readonly-wrapper').innerText;
            console.log("Account Number: ",world.InsuranceInfo.accountNumber);
            
        }

    }   

    async createCompanyAccount(){

        await t.click(accountTabBar.tabBarAccountTab.component.find('.gw-action--expand-button'));
        await t.click(accountTabBar.tabBarAccountTab.component.find('.gw-label').withText('New Account'));

        if( world.CompanyInsuredInfo.CompanyInfo.companyName == ''){
            
            world.CompanyInsuredInfo.CompanyInfo.companyName = 'Company ' + await autoGeneratedCustomMethod.generateRandomText(10);

        }

        await newAccount.newAccountNewAccountScreenNewAccountSearchDVGlobalContactNameInputSetName.setValue(world.CompanyInsuredInfo.CompanyInfo.companyName);
        await newAccount.newAccountNewAccountScreenNewAccountSearchDVSearchAndResetInputSetSearchLinksInputSetSearch.click();

        if( await newAccount.newAccountNewAccountScreenNewAccountSearchResultsLV.rowCount() != 0){

            await newAccount.newAccountNewAccountScreenNewAccountSearchResultsLV.clickOnCell(0,1);
            
        }
        else{

            await newAccount.newAccountScreenNewAccountButton.click();
            await newAccount.newAccountButtonNewAccount_Company.click();
            
            await createAccountWizard.primaryEmailTextInput(world.CompanyInsuredInfo.CompanyInfo.companyName.split(" ").join("")+"@Test.Test");
            await createAccountWizard.phoneNumber(await autoGeneratedCustomMethod.generateHomePhoneNumber());

            await this.fillUpAddressInfo
            (

                world.PrimaryInsuredInformation.AddressInfo.streetAddress,
                world.PrimaryInsuredInformation.AddressInfo.city,
                world.PrimaryInsuredInformation.AddressInfo.county,
                world.PrimaryInsuredInformation.AddressInfo.stateFull,
                world.PrimaryInsuredInformation.AddressInfo.zipCode,
                world.PrimaryInsuredInformation.AddressInfo.AddressType, 

            )

            await this.fillUpOrganizationInfo
            (

                world.OrganizationInfo.organizationName,
                world.OrganizationInfo.producerCode

            );

            await PcfButton(this.createAccountParent.find('div[id$="-Update"]')).click();

            world.InsuranceInfo.accountNumber = await summary.accountDetailsDetailViewTile_DVAccountNumber.component.find('.gw-value-readonly-wrapper').innerText;
            console.log("Account Number: ",world.InsuranceInfo.accountNumber);

        }




    }

    async fillUpAddressInfo(streetAddress, city, county, state, zipCode, addressType){

        let streetAddressLabel = this.createAccountParent.find('div[id$="-AddressLine1_Input"]').withText('Address 1');
        let cityLabel = this.createAccountParent.find('div[id$="-City_Input"]').withText('City');
        let countyLabel = this.createAccountParent.find('div[id$="-County_Input"]').withText('County');
        let stateLabel = this.createAccountParent.find('div[id$="-State_Input"]').withText('State');
        let zipCodeLabel = this.createAccountParent.find('div[id$="-PostalCode_Input"]').withText('ZIP Code');
        let addressTypeLabel = this.createAccountParent.find('div[id$="-AddressType_Input"]').withText('Address Type');

        await PcfTextInput(streetAddressLabel.find('div[id$="-AddressLine1"]')).setValue(streetAddress);
        await PcfTextInput(cityLabel.find('div[id$="-City"]')).setValue(city);
        await PcfTextInput(countyLabel.find('div[id$="-County"]')).setValue(county);

        await PcfSelectInput(stateLabel.find('div[id$="-State"]')).click();
        await PcfSelectInput(stateLabel.find('div[id$="-State"]')).selectOptionByLabel(state);

        await PcfTextInput(zipCodeLabel.find('div[id$="-PostalCode"]')).setValue(zipCode);
            
        await PcfSelectInput(addressTypeLabel.find('div[id$="-AddressType"]')).click();
        await PcfSelectInput(addressTypeLabel.find('div[id$="-AddressType"]')).selectOptionByLabel(addressType);

    }

    async fillUpOrganizationInfo(organizationName, producerCode){

        
        let organizationSearchButton = this.createAccountParent.find('div[id$="-SelectOrganization"]');
        await PcfButton(organizationSearchButton).click();

        await organizationSearchPopup.organizationSearchPopupOrganizationSearchPopupScreenOrganizationSearchDVGlobalContactNameInputSetName.setValue(organizationName);
        await organizationSearchPopup.organizationSearchPopupOrganizationSearchPopupScreenOrganizationSearchDVSearchAndResetInputSetSearchLinksInputSetSearch.click();
        await organizationSearchPopup.organizationSearchPopupScreenOrganizationSearchResultsLV.clickOnCell(0,0);
        
        let organizationProducerCode = this.createAccountParent.find('div[id$="-ProducerCode_Input"]');
        await PcfSelectInput(organizationProducerCode.find('div[id$="-ProducerCode"]')).selectOptionByLabel(producerCode);

    }

}